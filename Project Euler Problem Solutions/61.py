"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	        P4,n=n2	 	        1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two
digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal
(P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal,
and octagonal, is represented by a different number in the set.
"""


tris = {}
squs = {}
pents = {}
hexs = {}
hepts = {}
octs = {}

f_dicts = [tris,squs,pents,hexs,hepts,octs]
l_dicts = [{},{},{},{},{},{}]

def get_tri(n):
    return n*(n+1)//2

def get_squ(n):
    return n*n

def get_pent(n):
    return n*(3*n-1)//2

def get_hex(n):
    return n*(2*n-1)

def get_hept(n):
    return n*(5*n-3)//2

def get_oct(n):
    return n*(3*n-2)

i = 0

starts = [45,32,26,23,20,18]
finishes = [140,99,81,70,63,58]

funcs = [get_tri,get_squ,get_pent,get_hex,get_hept,get_oct]

while get_tri(i) < 10000:
    for j in range(len(funcs)):
        nr = funcs[j](i)
        if nr > 999 and nr < 10000:
            if f_dicts[j].get(str(nr)[:2]):
                f_dicts[j][str(nr)[:2]].append(nr)
            else:
                 f_dicts[j][str(nr)[:2]] = [nr]
            if l_dicts[j].get(str(nr)[2:]):
                l_dicts[j][str(nr)[2:]].append(nr)
            else:
                 l_dicts[j][str(nr)[2:]] = [nr]
    i += 1



def get_it(nums,used,last):
    
    if len(used) == 6:
        if str(nums[0])[:2] == last:
            return nums
    elif len(used) == 0:
        nrs = []
        for i in range(6):
            n_used = []
            n_used.append(i)
            for j in range(starts[i],finishes[i]+1):
                last = str(funcs[i](j))[2:]
                n_nums = nums.copy()
                n_nums.append(funcs[i](j))
                got = get_it(n_nums,n_used,last)
                if got != None:
                    nrs.append(got)
        return nrs
    else:
        for i in range(6):
            if i not in used:
                if f_dicts[i].get(last):
                    for nr in f_dicts[i][last]:
                        if int(nr) not in nums:
                            n_nums = nums.copy()
                            n_nums.append(int(nr))
                            n_used = used.copy()
                            n_used.append(i)
                            got = get_it(n_nums,n_used,str(nr)[2:])
                            if got != None:
                                return got
print(get_it([],[],''))
